#Main

import numpy as np
from Particle3D import Particle3D
import math
import sys
import MDUtilities as MD

"""
Sets initial conditions of the particles
Sets initial time and timestep
Creates lists for the force on each particle and the position of each particle
"""

filein = open("InputParam.txt","r")
SimParams = []
for line in filein.readlines():
    tokens = line.split("=")
    SimParams.append(float(tokens[1]))
filein.close()

numPart = int(SimParams[0])
NumSteps = int(SimParams[1])
dt =  SimParams[2]
temp =  SimParams[3]
rho =  SimParams[4]
CutOff =  SimParams[5]
sigma = SimParams[6]

print(str(sigma))


t = 0.0
maxTime = dt*NumSteps

particles = []
for i in range(numPart):
    particles.append(Particle3D(0.0,0.0,1,i+1))


force = []
position_info =[]

box = MD.setInitialPositions(rho, particles)
MD.setInitialVelocities(temp, particles)
boxLen = box[0]


"""
Calculates force between two particles.
The seperation vector (s) and distance (r) are inputted
Calculates force using the Leonard-Jones Potential
Impliments the minimum image convention by providing a cut-off point so a particle doesn't interact with another particles image
The force between the particles is returned.
"""
final_list=open("JAMIE.xyz", "w")

def force(r,s):
    if r>=3.0:
        force = 0.0
    else:
        force = ((48.0/(r**14))-(24.0/(r**8)))*s
    return force
    
"""
Calculates Total Force on Each Particle
The particle is inputted
This function calculates the force on each particle in the system. It intakes the particles information, calculates the contribution from each other particle and sums the contributions together.
This is repeated for each particle and the force on each particle is added to the list
Returns the list of forces on each particle
"""

def totalForce(p):
    f=[]
    k=0
    f2=[]
    s=0
    r=0

    for i in range(len(p)):
        while k<=(len(p)-1):
            if i == k:
                k = k+1
            else:
                s = Particle3D.separation(p[i],p[k],boxLen)
                r = np.linalg.norm(s)
                f.append(force(r,s))
                k = k+1
        f2.append(sum(f))
        f=[]
        k=0
    return f2
    

"""
This function establishes the boundary conditions. Periodic boundary conditions 
are imposed separately on the x, y and z components of a particle's position. 
If a particles position in any dimension is greater than 5 or less than -5, a new position is given to it
"""
def boundary(p):
    for i in range(3):
        pos = p.position[i]
        if pos>(boxLen):
            p.position[i] = (pos % (boxLen))
        elif pos<0:
            p.position[i] = (pos % (boxLen))+boxLen

"""
The update function uses the boundary function to impose boundary conditions on a particle's position.
The position is then updated using the leapPos method from Particle3D.
Boundary conditions are again applied to the updated position
"""
def updatePos(p,f,dt,t):
    boundary(p)
    p.leapPos(dt,f)
    boundary(p)
    

"""
Main Code
"""

#Uses the velocity verlet method to update position, velocity and force. Outpouts positions to a .xyz file

while t < maxTime:
	oldForce = totalForce(particles)
	for i in range(len(particles)):
		boundary(particles[i])
		iposition_info = (str(particles[i].label) + " " + str(particles[i].position[0]) + " " + str(particles[i].position[1]) + " " + str(particles[i].position[2]))
		position_info.append(iposition_info)
		updatePos(particles[i],oldForce[i],dt,t)
	newForce = totalForce(particles)
	for i in range(len(particles)):
		particles[i].leapVelocity(dt, 0.5*(oldForce[i]+newForce[i]))
	oldForce = newForce   
	t = t+dt
    
# Formats the .xyz so it can be read by vmd

i=0.0
k=0
temp_list=[]
for item in position_info:
    i = i+1
    deleted_brackets = str(item)[0:-1]
    temp_list.append(deleted_brackets)
    if (i % float(len(particles))) == 0:
        k=k+1
        joined_list = ("\n".join(temp_list))
        final_list.write(str(len(particles)) + "\n" + "Point = " + str(k) + "\n" + str(joined_list) + "\n")
        temp_list = []

